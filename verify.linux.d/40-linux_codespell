#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-only
#
# Git source code verification script
# https://github.com/pcmoore/git-verification_scripts
# Paul Moore <paul@paul-moore.com>
#

# NOTE: comments starting with '#@ ' will become info text in pstg
#@             Checks for spelling mistakes in the source code

# TODO: provide some config knob/arg for excluded words

####
# config

# support "**" in pathnames
shopt -s globstar

#
# files to exclude
#   format: space delimited file list
#
EXCLUDE_FILES=""
# documentation
EXCLUDE_FILES+="MAINTAINERS "

#
# words to exclude
#   format: comma delimited word list
#
EXCLUDE_WORDS=""
# normal words
EXCLUDE_WORDS+="preemptable,"
# functions
EXCLUDE_WORDS+="iput,"
# variables
EXCLUDE_WORDS+="filp,orign"

####
# functions

function exit_error() {
	echo ">>> error: $*"
	exit 1
}

function dep_check() {
	for i in $*; do
		command -v $i > /dev/null || exit_error "$i command not found"
	done
}

function kernel_top() {
	local top=$(pwd)
	while [[ ! -e $top/MAINTAINERS ]]; do
		top=$(cd $top/..; pwd)
		[[ $top == "/" ]] && return 1
	done
	echo "$top"
}

function git_uncommitted() {
	local changes=$(git status --porcelain 2>/dev/null | wc -l)
	[[ $changes -eq 0 ]] && return 1
	return 0
}

function tool_codespell() {
	local tfile=$(mktemp -t check-syntax-XXXXXX)
	cat - > $tfile
	codespell -q 16 -d -w -L "$EXCLUDE_WORDS" $tfile >& /dev/null
	cat $tfile
	rm -f $tfile
}

function check_file() {
	[[ -z "$1" || ! -r "$1" ]] && return
	cat "$1" | tool_codespell | diff --color=auto -pu \
		--label="$1.orig" "$1" --label="$1" -
}

####
# main

# find the kernel top directory
top=$(kernel_top)
[[ -z $top ]] && exit_error "not in a kernel directory"

# dependency checks
dep_check git codespell

# check for uncommitted changes
git_uncommitted && echo ">>> WARNING: you have uncommitted changes"

# loop through the files
rc=0
for i in $(git diff-tree --no-commit-id --name-only -r HEAD | sort -u); do
	# run through the skip list
	skip=0
	for j in $EXCLUDE_FILES; do
		if [[ $i == $j ]]; then
			skip=1
			break
		fi
	done
	if [[ $skip -ne 0 ]]; then
		echo ">>> skipping $i"
		continue
	fi

	# spellcheck
	echo ">>> spelling mistakes in $i"
	check_file "$top/$i"
	rc_tmp=$?
	[[ $rc -eq 0 ]] && rc=$rc_tmp
done

exit $rc
