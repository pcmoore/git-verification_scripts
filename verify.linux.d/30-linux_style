#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-only
#
# Git source code verification script
# https://github.com/pcmoore/git-verification_scripts
# Paul Moore <paul@paul-moore.com>
#

# NOTE: comments starting with '#@ ' will become info text in pstg
#@             Examines the coding style/format using clang-format

# TODO: provide some config knob/arg for selecting dirs

####
# config

# support "**" in pathnames
shopt -s globstar

# NOTE: makes use of the "pgit.clangformatconfig" git config variable to
#       specify the location of a clang-format config file, if empty the
#       default behavior will be used

#
# files to exclude
#   format: space delimited file list
#
EXCLUDE_FILES=""

#
# allow list of directories
#   format: space delimited file list
#
PATHS_ALLOWED=""
#PATHS_ALLOWED=" include/* security/** net/netlabel/* kernel/audit*"

####
# functions

function kernel_top() {
	local top=$(pwd)
	while [[ ! -e $top/MAINTAINERS ]]; do
		top=$(cd $top/..; pwd)
		[[ $top == "/" ]] && return 1
	done
	echo "$top"
}


function git_uncommitted() {
	local changes=$(git status --porcelain 2>/dev/null | wc -l)
	[[ $changes -eq 0 ]] && return 1
	return 0
}

function tool_clang() {
	# https://clang.llvm.org/docs/ClangFormat.html
	# https://www.kernel.org/doc/html/next/process/clang-format.html

	clang-format --style=file:$cfg_file
}

function check_file() {
	[[ -z "$1" || ! -r "$1" ]] && return
	cat "$1" | tool_clang | diff --color=auto -pu \
		--label="$1.orig" "$1" --label="$1" -
}

####
# main

# find the kernel top directory
top=$(kernel_top)
[[ -z $top ]] && exit 1

# check for uncommitted changes
git_uncommitted && echo ">>> WARNING: you have uncommitted changes"

# find the clang-format config file
cfg_file="$(git config --get pgit.clangformatconfig 2>/dev/null)"
[[ -z $cfg_file ]] && cfg_file="$top/.clang-format"
if [[ ! -r $cfg_file ]]; then
	echo ">>> missing clang-format config file ($cfg_file)"
	exit 1
else
	echo ">>> using config file \"$cfg_file\""
fi

# loop through the files
rc=0
for i in $(git diff-tree --no-commit-id --name-only -r HEAD | sort -u); do
	# run through the skip list
	skip=0
	for j in $EXCLUDE_FILES; do
		if [[ $i == $j ]]; then
			skip=1
			break
		fi
	done
	if [[ $skip -ne 0 ]]; then
		echo ">>> skipping $i"
		continue
	fi

	# process the files
	for j in $PATHS_ALLOWED; do
		if [[ $i == $j && $i =~ \.(c|h)$ ]]; then
			echo ">>> style differences in $i"
			check_file "$top/$i"
			rc_tmp=$?
			[[ $rc -eq 0 ]] && rc=$rc_tmp
		fi
	done
done

exit $rc
